using cAlgo.API;
using cAlgo.API.Indicators;
 
namespace cAlgo.Indicators
{
    [Indicator(IsOverlay = true, AutoRescale = false, AccessRights = AccessRights.None)]
    public class EnvelopeChannels : Indicator
    {
        public int LineBold;
        public Colors LineColor;
        private MovingAverage expo;
        private MovingAverage expo1;
        private MovingAverage expo2;
 
        [Parameter("Show 100PipsLevels", DefaultValue = 1)]
        public bool Set100Levels { get; set; }
 
        [Parameter("Show 50PipsLevels", DefaultValue = 1)]
        public bool Set50Levels { get; set; }
 
        [Parameter("Show 25PipsLevels", DefaultValue = 1)]
        public bool Set25Levels { get; set; }
 
        [Parameter("Show MA", DefaultValue = 1)]
        public bool RainbowSet { get; set; }
 
        [Parameter("MinLevel", DefaultValue = 0, MinValue = 0)]
        public int MinLevel { get; set; }
 
        [Parameter("MaxLevel", DefaultValue = 200, MinValue = 2)]
        public int MaxLevel { get; set; }
 
        [Parameter(DefaultValue = 200)]
        public int EnvelopePeriod { get; set; }
 
        [Parameter(DefaultValue = 1300)]
        public int EnvelopePeriod2 { get; set; }
 
        [Parameter(DefaultValue = 500)]
        public int EnvelopePeriod1 { get; set; }
 
        [Parameter("Show Envelope", DefaultValue = 1)]
        public bool EnvelopeSet { get; set; }
 
        [Parameter("Show Big Envelope", DefaultValue = 1)]
        public bool EnvelopeSetBig { get; set; }
 
        [Parameter("Envelope Up/Dn (Pips)", DefaultValue = 30)]
        public int EnvelopePips { get; set; }
 
        [Parameter("EnvelopeBig Up/Dn (Pips)", DefaultValue = 111)]
        public int EnvelopeBigPips { get; set; }
 
        [Output("Main", Color = Colors.Yellow, LineStyle = LineStyle.LinesDots, Thickness = 1)]
        public IndicatorDataSeries EnvelopeMain { get; set; }
 
        [Output("Main 1", Color = Colors.Green, LineStyle = LineStyle.Lines, Thickness = 2)]
        public IndicatorDataSeries EnvelopeMain1 { get; set; }
 
        [Output("Main 1UP", Color = Colors.Red, LineStyle = LineStyle.Lines, Thickness = 2)]
        public IndicatorDataSeries EnvelopeMain1up { get; set; }
 
        [Output("Main 1DN", Color = Colors.DodgerBlue, LineStyle = LineStyle.Lines, Thickness = 2)]
        public IndicatorDataSeries EnvelopeMain1dn { get; set; }
 
        [Output("Main 2", Color = Colors.White, LineStyle = LineStyle.Solid, Thickness = 3)]
        public IndicatorDataSeries EnvelopeMain2 { get; set; }
 
        [Output("Main 2UP", Color = Colors.White, LineStyle = LineStyle.Lines, Thickness = 2)]
        public IndicatorDataSeries EnvelopeMain2up { get; set; }
 
        [Output("Main 2DN", Color = Colors.White, LineStyle = LineStyle.Lines, Thickness = 2)]
        public IndicatorDataSeries EnvelopeMain2dn { get; set; }
 
        [Parameter("MAType", DefaultValue = 5)]
        public MovingAverageType matype { get; set; }
 
        [Parameter("MAType", DefaultValue = 5)]
        public MovingAverageType matype1 { get; set; }
 
        [Parameter("MAType", DefaultValue = 5)]
        public MovingAverageType matype2 { get; set; }
 
        // line bold
        [Parameter("Line bold", DefaultValue = 2, MinValue = 1, MaxValue = 5)]
        public int L1 { get; set; }
 
        // ===== linr color
        [Parameter(DefaultValue = 1)]
        public bool SetBlue { get; set; }
 
        [Parameter(DefaultValue = 0)]
        public bool SetRed { get; set; }
 
        [Parameter(DefaultValue = 0)]
        public bool SetWhite { get; set; }
 
        [Parameter(DefaultValue = 0)]
        public bool SetBlack { get; set; }
 
        [Parameter(DefaultValue = 0)]
        public bool SetGreen { get; set; }
 
        protected override void Initialize()
        {
 
            expo = Indicators.MovingAverage(MarketSeries.Close, EnvelopePeriod, matype);
            expo1 = Indicators.MovingAverage(MarketSeries.Close, EnvelopePeriod1, matype1);
            expo2 = Indicators.MovingAverage(MarketSeries.Close, EnvelopePeriod2, matype2);
 
        }
 
        public override void Calculate(int index)
        {
 
            if (RainbowSet)
            {
                EnvelopeMain[index] = expo.Result[index];
                EnvelopeMain1[index] = expo1.Result[index];
                EnvelopeMain2[index] = expo2.Result[index];
            }
 
            if (EnvelopeSet)
            {
                EnvelopeMain1up[index] = expo1.Result[index] + EnvelopePips * Symbol.PipSize;
                EnvelopeMain1dn[index] = expo1.Result[index] - EnvelopePips * Symbol.PipSize;
            }
 
            if (EnvelopeSetBig)
            {
                EnvelopeMain2up[index] = expo2.Result[index] + EnvelopeBigPips * Symbol.PipSize;
                EnvelopeMain2dn[index] = expo2.Result[index] - EnvelopeBigPips * Symbol.PipSize;
            }
 
            LineBold = L1;
 
            if (SetBlue)
            {
                LineColor = Colors.DodgerBlue;
            }
 
 
            if (SetRed)
            {
                LineColor = Colors.Red;
            }
            if (SetWhite)
            {
                LineColor = Colors.White;
            }
            if (SetBlack)
            {
                LineColor = Colors.Black;
            }
            if (SetGreen)
            {
                LineColor = Colors.YellowGreen;
            }
 
 
            if (Set100Levels && MinLevel < MaxLevel)
            {
                for (int i = MinLevel; i < MaxLevel; i++)
                {
                    ChartObjects.DrawHorizontalLine("Level" + i, i * 100 * Symbol.PipSize, LineColor, LineBold, LineStyle.Solid);
                }
            }
 
            if (Set25Levels && MinLevel < MaxLevel)
            {
                for (int i = MinLevel; i < MaxLevel; i++)
                {
                    ChartObjects.DrawHorizontalLine("Lh1" + i, i * 100 * Symbol.PipSize + 25 * Symbol.PipSize, Colors.Red, 1, LineStyle.DotsRare);
                    ChartObjects.DrawHorizontalLine("Lh3" + i, i * 100 * Symbol.PipSize + 75 * Symbol.PipSize, Colors.Red, 1, LineStyle.DotsRare);
                }
            }
 
            if (Set50Levels && MinLevel < MaxLevel)
            {
                for (int i = MinLevel; i < MaxLevel; i++)
                {
                    ChartObjects.DrawHorizontalLine("Lh2" + i, i * 100 * Symbol.PipSize + 50 * Symbol.PipSize, Colors.YellowGreen, 1, LineStyle.Lines);
                }
            }
 
 
 
        }
    }
}
